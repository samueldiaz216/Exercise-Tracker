{"version":3,"sources":["components/navbar.component.js","components/exercises-list.component.js","components/edit-exercise.component.js","components/create-exercise.component.js","components/create-user.component.js","App.js","index.js"],"names":["Navbar","className","to","Component","Exercise","props","exercise","username","description","duration","date","substring","_id","href","onClick","deleteExercise","ExerciseList","bind","state","exercises","axios","get","then","res","setState","data","catch","err","console","log","id","delete","this","filter","el","map","currentexercise","key","exerciseList","EditExercise","onChangeUsername","onChangeDescription","onChangeDuration","onChangeDate","onSubmit","Date","users","match","params","length","user","e","target","value","preventDefault","post","window","location","ref","required","onChange","type","selected","CreateExercise","CreateUser","App","path","exact","component","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.ce732b10.chunk.js","sourcesContent":["//When creating react component always import react and component \n//from react\nimport React, {Component} from \"react\";\n//Since we're using React router, we're going to import Link\n//Link allows us to link to different routes\nimport {Link} from \"react-router-dom\";\n\n\n//All components start like this. It's exporting the component on \n//the same line it is created\nexport default class Navbar extends Component{\n    render(){\n        return(\n            <nav className=\"navbar navbar-dark bg-dark navbar-expand-lg\">\n                <Link to=\"/\" className=\"navbar-brand\">Excercise Tracker</Link>\n                <div className=\"collapse navbar-collapse\">\n                    <ul className=\"navbar-nav mr-auto\">\n                        <li className=\"navbar-item\">\n                            <Link to=\"/\" className=\"nav-link\">Exercises</Link>\n                        </li>\n                        <li className=\"navbar-item\">\n                            <Link to=\"/create\" className=\"nav-link\">Create Exercise Log</Link>\n                        </li>\n                        <li className=\"navbar-item\">\n                            <Link to=\"/users\" className=\"nav-link\">Create User</Link>\n                        </li>\n                    </ul>\n                </div>\n            </nav>\n        )\n    }\n}","//Homepage of our app that is showing all exercises in our database\nimport React, {Component} from \"react\";\nimport {Link} from \"react-router-dom\";\nimport axios from \"axios\";\n\n//Exercise component implemented as a functional react component\n//This lacks state. If you don't need state, use a functional component\nconst Exercise = props => (\n    <tr>\n        <td>{props.exercise.username}</td>\n        <td>{props.exercise.description}</td>\n        <td>{props.exercise.duration}</td>\n        <td>{props.exercise.date.substring(0,10)}</td>\n        <td>\n            <Link to={\"/edit/\"+props.exercise._id}>edit</Link>|<a href=\"#\" onClick={()=>{props.deleteExercise(props.exercise._id)}}>delete</a>\n        </td>\n    </tr>\n)\n\nexport default class ExerciseList extends Component {\n    constructor(props){\n        super(props);\n\n        this.deleteExercise = this.deleteExercise.bind(this);\n\n        this.state={exercises:[]};\n    }\n\n    //React does this automatically before anything is displayed\n    //Will get all exercises\n    componentDidMount(){\n        axios.get(\"http://localhost:3000/exercises/\")//Route to get all exercises\n            .then(res => {\n                this.setState({exercises: res.data})//assigns array of ecercises in db to state with all fields\n            })\n            .catch((err)=> {\n                console.log(err);\n            })\n    }\n\n    deleteExercise(id){\n        axios.delete(\"http://localhost:3000/exercises/\"+id)//Deletes from db\n            .then(res => console.log(res.data));\n        this.setState({\n            exercises: this.state.exercises.filter(el => el._id != id)//Deletes from display\n            //Filters displayed exercise list so it doesn't show exercise\n            //with id that you just deleted\n        })\n    }\n\n    exerciseList() {\n        return this.state.exercises.map(currentexercise => {//For every exercise in the array it will return a component\n            return <Exercise exercise={currentexercise} deleteExercise={this.deleteExercise} key={currentexercise._id}/>; \n            //Each component is a row of the table\n        })\n    }\n\n\n    render(){\n        return(\n            <div>\n                <h3>Logged Exercises</h3>\n                <table className=\"table\">\n                    <thead className=\"thead-light\">\n                        <tr>\n                            <th>Username</th>\n                            <th>Description</th>\n                            <th>Duration</th>\n                            <th>Dates</th>\n                            <th>Actions</th>\n                        </tr>\n                    </thead>\n                    <tbody>\n                        {this.exerciseList()}\n                    </tbody>\n                </table>\n            </div>\n        )\n    }\n}","//Will allow us to edit exercises in the database.\nimport React, {Component} from \"react\";\nimport axios from \"axios\";\nimport DatePicker from  \"react-datepicker\";\nimport \"react-datepicker/dist/react-datepicker.css\"//Styling for datepicker\n\nexport default class EditExercise extends Component {\n    constructor(props){\n        // in javascript classses you always need to call the super constructor\n        // when defining the constructor of a subclass\n        // All react component classes that have a constructor should\n        // start with a super(props) call\n        super(props);\n\n        //In order to make sure that \"this\" keyword refers to the class\n        //you need to bind it to each of the methods. Otherwise, it'd be undefined\n        this.onChangeUsername = this.onChangeUsername.bind(this);\n        this.onChangeDescription = this.onChangeDescription.bind(this);\n        this.onChangeDuration = this.onChangeDuration.bind(this);\n        this.onChangeDate = this.onChangeDate.bind(this);\n        this.onSubmit = this.onSubmit.bind(this);\n        \n        //Setting initial state \n        this.state = {\n            // We will create properties that will correspond to the fields in the\n            // mongodb document\n            username: \"\",\n            description: \"\",\n            duration: 0,\n            date: new Date(),\n            users:[]//dropdown list for user to be associated with exercise\n        }\n        //State is how we create variables in react\n        //Whenevver you update the state, your values will \n        //be automatically updated\n\n\n    }//End of constructor\n\n        //This is a react life cycle method\n        //Automatically called by react in different points\n        //this method will automatically be called right before \n        //anything displays on the page\n        componentDidMount(){\n            /////////////////////////////////////////////Gets id directly from the url\n            axios.get(\"http://localhost:3000/exercises/\"+this.props.match.params.id)\n                .then(res => {//Returns specific exercise with id\n                    this.setState({\n                        username: res.data.username,\n                        description: res.data.username,\n                        duration: res.data.username,\n                        date: new Date(res.data.date)\n                    })\n                })\n                .catch(function(err){\n                    console.log(err);\n                })\n            axios.get(\"http://localhost:3000/users/\")//Will get users from db\n            .then(res => {\n                //res.data is the array returned with all the users\n                if(res.data.length > 0){//Checks if there are users in the db\n                    this.setState({\n                        users: res.data.map(user => user.username),//Displays username for each user in db\n                    })\n                }\n            });\n        }\n\n        //The following 4 methods are used to change the state of a field\n        onChangeUsername(e){\n            this.setState({\n                username:e.target.value\n            });\n        }\n\n        onChangeDescription(e){\n            this.setState({\n                description:e.target.value\n            });\n        }\n        \n        onChangeDuration(e){\n            this.setState({\n                duration:e.target.value\n            });\n        }\n\n        //For dates it's a little different. We will use a library to so you can pick \n        //a date and then we will assign that to the field.\n        onChangeDate(date){\n            this.setState({\n                date: date\n            });\n        }\n\n        onSubmit(e){\n            e.preventDefault();//Prevents what submit would have normally done\n\n            const exercise ={\n                username: this.state.username,\n                description: this.state.description,\n                duration: this.state.duration,\n                date: this.state.date\n            }\n\n            console.log(exercise);\n            //submits an exercise to the database\n            axios.post(\"http://localhost:3000/exercises/update/\"+this.props.match.params.id,exercise)\n                .then(res => console.log(res.data));\n            //After the user will be sent back to the home page with this command...\n            window.location = \"/\";\n\n        }\n\n    render(){\n        return(\n            <div>\n                <h3>Edit Exercise Log</h3>\n                {/* Html form. onSubmit will be called when form submitted*/}\n                <form onSubmit={this.onSubmit}>\n                    <div className=\"form-group\">\n                        <label>Username: </label>\n                        {/* Select box is drop down menu */}\n                        <select ref=\"userInput\"\n                            required\n                            className=\"form-control\"\n                            value={this.state.username}\n                            onChange={this.onChangeUsername}>\n                            {\n                                //Array of users\n                                this.state.users.map(function(user) {\n                                    return <option//Option on the selectbox for each array item\n                                        //Key which is the user\n                                        key={user}\n                                        //Value which is the user and text which is the user.\n                                        value={user}>{user}\n                                        </option>\n                                })\n                            }\n                        </select>    \n                    </div>\n                    <div className=\"form-group\">\n                        <label>Description: </label>\n                        <input type=\"text\"\n                            required\n                            className=\"form-control\"\n                            value={this.state.description}\n                            onChange={this.onChangeDescription}\n                            />\n                    </div>\n                    <div className=\"form-group\">\n                        <label>duration (in minutes): </label>\n                        <input\n                            type=\"text\"\n                            className=\"form-control\"\n                            value={this.state.duration}\n                            onChange={this.onChangeDuration}\n                        />\n\n                    </div>\n                    <div className=\"form-group\">\n                        <label>Date: </label>\n                        <div>\n                            <DatePicker\n                                selected={this.state.date}\n                                onChange={this.onChangeDate}\n                            />\n                        </div>\n                    </div>\n\n                    <div className=\"form-group\">\n                        <input type=\"submit\" value=\"Edit Exercise Log\" className=\"btn btn-primary\"/>\n                    </div>\n                </form>\n            </div>\n        )\n    }\n}","//Will allow us to add exercises into the database.\nimport React, {Component} from \"react\";\nimport axios from \"axios\";\nimport DatePicker from  \"react-datepicker\";\nimport \"react-datepicker/dist/react-datepicker.css\"//Styling for datepicker\n\nexport default class CreateExercise extends Component {\n    constructor(props){\n        // in javascript classses you always need to call the super constructor\n        // when defining the constructor of a subclass\n        // All react component classes that have a constructor shold\n        // start with a super(props) call\n        super(props);\n\n        //In order to make sure that \"this\" keyword refers to the class\n        //you need to bind it to each of the methods. Otherwise, it'd be undefined\n        this.onChangeUsername = this.onChangeUsername.bind(this);\n        this.onChangeDescription = this.onChangeDescription.bind(this);\n        this.onChangeDuration = this.onChangeDuration.bind(this);\n        this.onChangeDate = this.onChangeDate.bind(this);\n        this.onSubmit = this.onSubmit.bind(this);\n        \n        //Setting initial state \n        this.state = {\n            // We will create properties that will correspond to the fields in thw \n            // mongodb document\n            username: \"\",\n            description: \"\",\n            duration: 0,\n            date: new Date(),\n            users:[]//dropdown list for user to be associated with exercise\n        }\n        //State is how we create variables in react\n        //Whenever you update the state, your values will \n        //be automatically updated\n\n\n    }//End of constructor\n\n        //This is a react life cycle method\n        //Automatically called by react in different points\n        //this method will automatically be called right before \n        //anything displays on the page\n        componentDidMount(){\n            axios.get(\"http://localhost:3000/users/\")//Will get users from db\n            .then(res => {\n                //res.data is the array returned with all the users\n                if(res.data.length > 0){//Checks if there are users in the db\n                    this.setState({\n                        users: res.data.map(user => user.username),//Displays username for each user in db\n                        username: res.data[0].username\n                        //username should automatically be set to the first user in the drop down menu\n                    })\n                }\n            });\n        }\n\n        //The following 4 methods are used to change the state of a field\n        onChangeUsername(e){\n            this.setState({\n                username:e.target.value\n            });\n        }\n\n        onChangeDescription(e){\n            this.setState({\n                description:e.target.value\n            });\n        }\n        \n        onChangeDuration(e){\n            this.setState({\n                duration:e.target.value\n            });\n        }\n\n        //For dates it's a little different. We will use a library to so you can pick \n        //a date and then we will assign that to the field.\n        onChangeDate(date){\n            this.setState({\n                date: date\n            });\n        }\n\n        onSubmit(e){\n            e.preventDefault();//Prevents what submit would have normally done\n\n            const exercise ={\n                username: this.state.username,\n                description: this.state.description,\n                duration: this.state.duration,\n                date: this.state.date\n            }\n\n            console.log(exercise);\n            //This will eventually be the place where we submit an exercise to the database\n            axios.post(\"http://localhost:3000/exercises/add\",exercise)\n                .then(res => console.log(res.data));\n            //After the user will be sent back to the home page with this command...\n            window.location = \"/\";\n\n        }\n\n    render(){\n        return(\n            <div>\n                <h3>Create New Exercise Log</h3>\n                {/* Html form. onSubmit will be called when form submitted*/}\n                <form onSubmit={this.onSubmit}>\n                    <div className=\"form-group\">\n                        <label>Username: </label>\n                        {/* Select box is drop down menu */}\n                        <select ref=\"userInput\"\n                            required\n                            className=\"form-control\"\n                            value={this.state.username}\n                            onChange={this.onChangeUsername}>\n                            {\n                                //Array of users\n                                this.state.users.map(function(user) {\n                                    return <option//Option on the selectbox for each array item\n                                        //Key which is the user\n                                        key={user}\n                                        //Value which is the user and text which is the user.\n                                        value={user}>{user}\n                                        </option>\n                                })\n                            }\n                        </select>    \n                    </div>\n                    <div className=\"form-group\">\n                        <label>Description: </label>\n                        <input type=\"text\"\n                            required\n                            className=\"form-control\"\n                            value={this.state.description}\n                            onChange={this.onChangeDescription}\n                            />\n                    </div>\n                    <div className=\"form-group\">\n                        <label>duration (in minutes): </label>\n                        <input\n                            type=\"text\"\n                            className=\"form-control\"\n                            value={this.state.duration}\n                            onChange={this.onChangeDuration}\n                        />\n\n                    </div>\n                    <div className=\"form-group\">\n                        <label>Date: </label>\n                        <div>\n                            <DatePicker\n                                selected={this.state.date}\n                                onChange={this.onChangeDate}\n                            />\n                        </div>\n                    </div>\n\n                    <div className=\"form-group\">\n                        <input type=\"submit\" value=\"Create Exercise Log\" className=\"btn btn-primary\"/>\n                    </div>\n                </form>\n            </div>\n        )\n    }\n}","import React, {Component} from \"react\";\nimport axios from \"axios\";\n\nexport default class CreateUser extends Component {\n    constructor(props){\n       \n        super(props);\n\n        //In order to make sure that \"this\" keyword refers to the class\n        //you need to bind it to each of the methods. Otherwise, it'd be undefined\n        this.onChangeUsername = this.onChangeUsername.bind(this);\n        this.onSubmit = this.onSubmit.bind(this);\n        \n        //Setting initial state \n        this.state = {\n            // We will create properties that will correspond to the fields in thw \n            // mongodb document\n            username: \"\"\n        }\n        //State is how we create variables in react\n        //Whenevver you update the state, your values will \n        //be automatically updated\n\n\n    }//End of constructor\n\n    onChangeUsername(e){\n        this.setState({\n            username:e.target.value\n        });\n    }\n\n    onSubmit(e){\n        e.preventDefault();//Prevents what submit would have normally done\n\n        const user ={\n            username: this.state.username\n        }\n\n        axios.post(\"http://localhost:3000/users/add\",user)\n            .then(res => console.log(res.data));\n\n        console.log(user);\n        \n        \n        this.setState({\n            username:''\n        })\n\n    }\n\n    render(){\n        return(\n            <div>\n                <h3>Create New User</h3>\n                <form onSubmit={this.onSubmit}>\n                    <div className=\"form-group\">\n                        <label>Username: </label>\n                        <input type=\"text\"\n                            required//Error message pops up if user clicks submoit without entering anyhting in this input\n                            className=\"form-control\"\n                            value={this.state.username}\n                            onChange={this.onChangeUsername}\n                            />\n                    </div>\n                    <div className=\"form-group\">\n                        <input type=\"submit\" value=\"Create User\" className=\"btn btn-primary\"/>\n                    </div>\n                </form>\n            </div>\n        )\n    }\n}","import React from 'react';\nimport {BrowserRouter as Router, Route} from \"react-router-dom\";\nimport \"bootstrap/dist/css/bootstrap.min.css\"\n\nimport Navbar from \"./components/navbar.component\";\nimport ExerciseList from \"./components/exercises-list.component\";\nimport EditExercise from \"./components/edit-exercise.component\";\nimport CreateExercise from \"./components/create-exercise.component\";\nimport CreateUser from \"./components/create-user.component\";\n\n\nfunction App() {\n  return(\n  // This div uses bootstrap to make things prettier\n  <div className=\"container\">\n    <Router>\n      {/* Navbar must be in Router, because it uses router */}\n      <Navbar/>\n      \n      <br/>\n      <Route path=\"/\" exact component={ExerciseList}/>\n      <Route path=\"/edit/:id\" component={EditExercise}/>\n      <Route path=\"/create\" component={CreateExercise}/>\n      <Route path=\"/users\" component={CreateUser}/>\n    </Router>\n  </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\n\nReactDOM.render(<App />,document.getElementById('root')\n);\n\n"],"sourceRoot":""}